import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o inicial do Streamlit
st.set_page_config(page_title="Dashboard de An√°lise de Produ√ß√£o Agr√≠cola", layout="wide")

# T√≠tulo e introdu√ß√£o
st.title("üå± Dashboard de An√°lise de Produ√ß√£o Agr√≠cola")
st.markdown("Este dashboard oferece uma an√°lise abrangente da produ√ß√£o agr√≠cola por munic√≠pio e produto, facilitando insights sobre produtividade e valores de produ√ß√£o do estado PERMANBUCO.")

# Carregar arquivo
uploaded_file = st.file_uploader("üìÅ Selecione o arquivo Excel, HTML ou CSV", type=["xls", "xlsx", "html", "csv"])

if uploaded_file is not None:
    # Identificar tipo de arquivo e ler os dados
    if uploaded_file.name.endswith('.xls') or uploaded_file.name.endswith('.xlsx'):
        engine = 'openpyxl' if uploaded_file.name.endswith('.xlsx') else 'xlrd'
        try:
            data = pd.read_excel(uploaded_file, engine=engine)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo Excel: {e}")
            data = None
    elif uploaded_file.name.endswith('.csv'):
        try:
            data = pd.read_csv(uploaded_file)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo CSV: {e}")
            data = None
    else:
        try:
            tables = pd.read_html(uploaded_file)
            data = tables[0] if tables else None
            if data is None:
                st.error("Nenhuma tabela encontrada no arquivo HTML.")
        except Exception as e:
            st.error(f"Erro ao ler o arquivo HTML: {e}")
            data = None

    if data is not None:
        data.columns = data.columns.str.strip()  # Limpar espa√ßos nas colunas

        # Divis√£o em colunas para visual moderno
        col1, col2 = st.columns([3, 1])

        # Exibir estrutura e dados na primeira coluna
        with col1:
            st.subheader("üìä Dados Carregados")
            st.dataframe(data)

        with col2:
            # Estat√≠sticas principais
            st.subheader("üìå Estat√≠sticas Principais")
            producao_total = data.groupby('nome')['quant'].sum().reset_index()
            municipio_top = producao_total.loc[producao_total['quant'].idxmax()]

            st.metric(label="Munic√≠pio com Maior Produ√ß√£o", value=f"{municipio_top['nome']}", delta=f"{municipio_top['quant']} t")

            valor_total = data.groupby('nome')['valor'].sum().reset_index()
            municipio_valor_top = valor_total.loc[valor_total['valor'].idxmax()]
            st.metric(label="Munic√≠pio com Maior Valor de Produ√ß√£o", value=f"{municipio_valor_top['nome']}", delta=f"R${municipio_valor_top['valor']:.2f} mil")

        # An√°lises por Munic√≠pio
        with st.container():
            st.subheader("üîç An√°lise Completa por Munic√≠pio")
            producao_total.columns = ['Munic√≠pio', 'Produ√ß√£o Total (t)']
            area_media = data.groupby('nome')['area'].mean().reset_index().rename(columns={'nome': 'Munic√≠pio', 'area': '√Årea M√©dia Colhida (ha)'})
            rendimento_medio = data.groupby('nome')['rend_med'].mean().reset_index().rename(columns={'nome': 'Munic√≠pio', 'rend_med': 'Rendimento M√©dio (kg/ha)'})
            valor_total.columns = ['Munic√≠pio', 'Valor Total da Produ√ß√£o (R$1.000)']
            
            analise_completa = producao_total.merge(area_media, on='Munic√≠pio').merge(rendimento_medio, on='Munic√≠pio').merge(valor_total, on='Munic√≠pio')
            st.dataframe(analise_completa.sort_values(by='Produ√ß√£o Total (t)', ascending=False))

        # Gr√°ficos de an√°lise
        st.subheader("üìà Gr√°ficos de An√°lise por Munic√≠pio")
        
        col3, col4 = st.columns(2)
        with col3:
            fig_area = px.bar(analise_completa.sort_values(by='√Årea M√©dia Colhida (ha)', ascending=False),
                              x='Munic√≠pio', y='√Årea M√©dia Colhida (ha)', color='√Årea M√©dia Colhida (ha)',
                              title='√Årea M√©dia Colhida por Munic√≠pio', color_continuous_scale=px.colors.sequential.Blues)
            st.plotly_chart(fig_area)

        with col4:
            fig_rendimento = px.bar(analise_completa.sort_values(by='Rendimento M√©dio (kg/ha)', ascending=False),
                                    x='Munic√≠pio', y='Rendimento M√©dio (kg/ha)', color='Rendimento M√©dio (kg/ha)',
                                    title='Rendimento M√©dio por Munic√≠pio', color_continuous_scale=px.colors.sequential.Greens)
            st.plotly_chart(fig_rendimento)

        # An√°lise por Produto Agr√≠cola
        st.subheader("üåæ An√°lise por Produto Agr√≠cola")
        producao_produto = data.groupby('prod')['quant'].sum().reset_index().rename(columns={'prod': 'Produto', 'quant': 'Produ√ß√£o Total (t)'})
        valor_produto = data.groupby('prod')['valor'].sum().reset_index().rename(columns={'prod': 'Produto', 'valor': 'Valor Total da Produ√ß√£o (R$1.000)'})
        analise_produto = producao_produto.merge(valor_produto, on='Produto')
        st.dataframe(analise_produto.sort_values(by='Valor Total da Produ√ß√£o (R$1.000)', ascending=False))

        # Gr√°fico Top 5 produtos
        top5_valor_produto = analise_produto.nlargest(5, 'Valor Total da Produ√ß√£o (R$1.000)')
        fig_top5_valor_produto = px.bar(top5_valor_produto, x='Produto', y='Valor Total da Produ√ß√£o (R$1.000)',
                                        title='Top 5 Produtos por Valor de Produ√ß√£o', color='Valor Total da Produ√ß√£o (R$1.000)',
                                        color_continuous_scale=px.colors.sequential.Inferno)
        st.plotly_chart(fig_top5_valor_produto)

        # Filtro e visualiza√ß√£o por munic√≠pio
        st.subheader("üåç Filtrar Dados por Munic√≠pio")
        municipio_escolhido = st.selectbox("Escolha um Munic√≠pio", data['nome'].unique())
        dados_municipio = data[data['nome'] == municipio_escolhido]
        st.write(f"Dados para o Munic√≠pio: {municipio_escolhido}")
        st.dataframe(dados_municipio)

        # An√°lise de Produtividade por Produto
        st.subheader("üìä Produtividade M√©dia por Produto")
        produtividade_produto = data.groupby('prod').apply(lambda x: (x['quant'].sum() / x['area'].sum())).reset_index()
        produtividade_produto.columns = ['Produto', 'Produtividade M√©dia (kg/ha)']
        st.dataframe(produtividade_produto.sort_values(by='Produtividade M√©dia (kg/ha)', ascending=False))

        # Gr√°fico de Produtividade por Produto
        fig_produtividade = px.bar(produtividade_produto.sort_values(by='Produtividade M√©dia (kg/ha)', ascending=False),
                                x='Produto', y='Produtividade M√©dia (kg/ha)', color='Produtividade M√©dia (kg/ha)',
                                title='Produtividade M√©dia por Produto', color_continuous_scale=px.colors.sequential.Plasma)
        st.plotly_chart(fig_produtividade)

        # An√°lise de Efici√™ncia Econ√¥mica por Produto
        st.subheader("üí∏ Efici√™ncia Econ√¥mica por Produto (Valor por Hectare)")
        eficiencia_economica = data.groupby('prod').apply(lambda x: (x['valor'].sum() / x['area'].sum())).reset_index()
        eficiencia_economica.columns = ['Produto', 'Valor por Hectare (R$/ha)']
        st.dataframe(eficiencia_economica.sort_values(by='Valor por Hectare (R$/ha)', ascending=False))

        # Gr√°fico de Efici√™ncia Econ√¥mica por Produto
        fig_eficiencia = px.bar(eficiencia_economica.sort_values(by='Valor por Hectare (R$/ha)', ascending=False),
                                x='Produto', y='Valor por Hectare (R$/ha)', color='Valor por Hectare (R$/ha)',
                                title='Efici√™ncia Econ√¥mica por Produto', color_continuous_scale=px.colors.sequential.Sunset)
        st.plotly_chart(fig_eficiencia)
else:
    st.info("Por favor, fa√ßa o upload de um arquivo para iniciar¬†a¬†an√°lise.")